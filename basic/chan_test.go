package basic

import (
	"encoding/hex"
	"fmt"
	"math/big"
	"sync"
	"sync/atomic"
	"testing"
	"time"

	"github.com/vitelabs/go-vite/common"
)

func TestLen(t *testing.T) {
	var ch = make(chan int)

	println(len(ch))

	ch = make(chan int, 5)

	println(len(ch))

	ch <- 1
	println(len(ch))
	ch <- 2
	println(len(ch))
}

type Hash [10]byte

func TestArr(t *testing.T) {
	bytes, _ := hex.DecodeString("1234")
	println(string(bytes))
	var h Hash
	copy(h[:], bytes)

	var h2 Hash
	copy(h2[:], bytes)

	m := make(map[*Hash]string)
	m[&h] = "10"
	m[&h2] = "11"

	println(m[&h])
	println(m[&h2])
}

func TestChanClose(t *testing.T) {
	c := make(chan int)

	go func() {
		fmt.Println("open")
		c <- 1
		fmt.Println("close")
	}()

	time.Sleep(2 * time.Second)
	close(c)
	time.Sleep(2 * time.Second)

	fmt.Println("--------close")

}

func TestChainNil(t *testing.T) {
	var c chan int
	var wg sync.WaitGroup
	wg.Add(1)
	go func() {
		fmt.Println("open")
		c <- 1
		fmt.Println("close")
		wg.Done()
	}()

	<-c
	wg.Wait()
	fmt.Println("end----")
}

func TestSize(t *testing.T) {
	b0 := []byte{127, 183, 218, 202, 250, 55, 105, 41, 15, 161, 160, 116, 245, 1, 9, 58, 58, 130, 186, 219, 196, 82, 53, 251, 70, 11, 192, 17, 16, 73, 162, 189}

	b1 := []byte{8, 141, 5, 92, 193, 105, 139, 105, 231, 21, 21, 200, 230, 9, 99, 38, 55, 58, 76, 94, 150, 140, 63, 107, 53, 245, 60, 113, 215, 31, 194, 255, 129}

	b2 := []byte{231, 197, 152, 195, 13, 81, 188, 192, 202, 138, 13, 187, 223, 154, 171, 113, 192, 109, 191, 99, 169, 196, 143, 145, 41, 213, 202, 143, 138, 21, 162, 85, 22, 152, 215, 30, 249, 186, 27, 104, 84, 153, 209, 159, 189, 170, 103, 118, 122, 80, 101, 176, 109, 123, 142, 75, 90, 229, 26, 64, 19, 163, 16, 106, 5, 142, 250, 87, 145, 1, 123, 91, 169, 54, 202, 35, 27, 35, 239, 191, 196, 60, 9, 190, 93, 36, 101, 49, 87, 48, 8, 62, 20, 160, 69, 101, 108, 133, 151, 65, 220, 239, 221, 76, 53, 211, 175, 55, 149, 7, 223, 80, 214, 27, 233, 98, 24, 197, 140, 137, 111, 94, 86, 109, 224, 36, 134, 52, 43, 155, 10, 112, 243, 218, 82, 229, 209, 137, 232, 156, 155, 94, 30, 227, 240, 21, 112, 177, 169, 53, 126, 134, 33, 189, 13, 202, 11, 143, 223, 155, 210, 161, 3, 238, 112, 62, 40, 254, 252, 244, 114, 112, 58, 1, 180, 199, 232, 239, 155, 3, 192, 49, 162, 236, 92, 166, 151, 46, 133, 92, 89, 104, 120, 108, 2, 11, 229, 148, 174, 190, 223, 119, 22, 240, 139, 130, 169, 92, 191, 216, 231, 118, 125, 76, 170, 65, 200, 240, 248, 229, 46, 56, 141, 23, 96, 188, 118, 3, 159, 31, 6, 250, 217, 252, 100, 233, 5, 38, 110, 121, 205, 14, 190, 149, 173, 91, 66, 120, 212, 25, 150, 147, 97, 156, 188, 54, 184, 35, 97, 168, 17, 159, 166, 47, 5, 64, 34, 185, 156, 198, 76, 1, 182, 62, 139, 66, 180, 140, 124, 14, 232, 220, 38, 130, 63, 164, 17, 84, 11, 219, 36, 50, 49, 130, 124, 63, 167, 187, 2, 202, 180, 111, 148, 188, 235, 128, 138, 250, 118, 34, 131, 228, 250, 89, 4, 16, 239, 59, 198, 44, 10, 126, 63, 243, 197, 116, 133, 155, 135, 39, 129, 249, 207, 86, 25, 132, 216, 81, 248, 70, 143, 66, 229, 187, 169, 235, 38, 189, 13, 36, 218, 165, 130, 237, 3, 71, 108, 125, 126, 52, 110, 41, 177, 68, 12, 73, 112, 72, 255, 17, 24, 75, 13, 232, 215, 85, 214, 40, 15, 7, 104, 117, 120, 174, 92, 139, 159, 212, 48, 6, 19, 225, 42, 92, 53, 131, 181, 228, 239, 20, 192, 201, 41, 24, 68, 40, 87, 2, 85, 205, 223, 25, 11, 53, 52, 197, 118, 213, 0, 139, 16, 116, 226, 146, 16, 102, 190, 121, 169, 240, 135, 32, 245, 228, 150, 96, 23, 242, 214, 206, 29, 77, 151, 58, 109, 191, 165, 168, 0, 212, 177, 192, 21, 118, 98, 25, 136, 66, 56, 197, 213, 206, 127, 29, 223, 54, 196, 160, 225, 67, 2, 48, 176, 187, 237, 77, 53, 138, 131, 180, 152, 184, 124, 1, 222, 97, 195, 236, 170, 8, 106, 64, 8, 145, 253, 58, 17, 139, 100, 242, 237, 119, 18, 106, 37, 109, 105, 5, 228, 103, 178, 176, 108, 170, 57, 39, 25, 195, 15, 16, 159, 252, 52, 219, 224, 203, 92, 105, 6, 191, 42, 65, 143, 110, 119, 182, 90, 75, 146, 22, 242, 2, 64, 91, 255, 65, 117, 195, 12, 233, 203, 109, 136, 37, 51, 122, 230, 41, 37, 6, 121, 10, 176, 53, 9, 174, 190, 10, 238, 56, 32, 178, 46, 63, 143, 20, 250, 13, 164, 165, 84, 192, 197, 112, 162, 228, 173, 161, 181, 42, 126, 13, 233, 197, 0, 116, 6, 154, 28, 163, 194, 225, 164, 214, 192, 156, 197, 10, 119, 23, 216, 204, 203, 91, 60, 166, 152, 189, 109, 141, 245, 169, 146, 200, 82, 212, 163, 48, 75, 37, 178, 123, 59, 0, 196, 251, 27, 213, 29, 25, 122, 226, 243, 159, 180, 147, 137, 29, 41, 36, 150, 129, 11, 30, 239, 67, 166, 142, 97, 163, 45, 91, 82, 251, 160, 131, 145, 103, 130, 153, 195, 89, 155, 128, 87}

	b3 := []byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	b4 := []byte{9, 45, 157, 17, 130, 92, 252, 51, 63, 199, 169, 196, 33, 212, 248, 110, 79, 34, 17, 67, 178, 205, 20, 242, 218, 85, 226, 33, 123, 89, 161, 121, 200}

	b5 := []byte{2, 73, 201, 146, 133, 20, 58, 167, 42, 206, 200, 21, 181, 50, 197, 112, 242, 235, 125, 150, 13, 8, 201, 133, 8, 96, 64, 6, 73, 63, 13, 89, 17}

	b6 := []byte{3, 91, 184, 123, 68, 105, 137, 49, 208, 160, 207, 93, 189, 45, 106, 40, 59, 251, 5, 227, 248, 161, 37, 129, 245, 238, 95, 55, 100, 40, 255, 57, 225}

	fmt.Println(len(b0) + len(b1)*5 + len(b2) + len(b3) + len(b4) + len(b5) + len(b6))
}

func TestBigInt2(t *testing.T) {
	a1, _ := big.NewInt(0).SetString("-1", 10)
	println("a1", a1.Sign())
	println("new", big.NewInt(0).SetBytes(a1.Bytes()).Sign())

	//a1, _ := big.NewInt(0).SetString("-12000000000000000000", 10)
	//println(big.NewInt(0).SetBytes(a1.Bytes()).Sign())
	//
	//s := hex.EncodeToString(a1.Bytes())
	//t.Log("a1:", s)
	//t.Log("a1:", len(a1.Bytes()))
	//
	//a2, _ := big.NewInt(0).SetString("12000000000000000000", 10)
	//
	//fmt.Println(fmt.Sprintf("%b", a2))
	//
	//s2 := hex.EncodeToString(a2.Bytes())
	//t.Log("a2", s2)
	//t.Log("a2", len(a2.Bytes()))

	//for i := int64(0); i < 10000; i++ {
	//	fmt.Println(hex.EncodeToString(big.NewInt(i).Bytes()))
	//}
}

func TestCh2(t *testing.T) {
	N := 2
	bucketCh := make(chan int, N)

	var wg sync.WaitGroup
	wg.Add(N)

	var sum int32
	var globalErr error
	for i := 0; i < N; i++ {
		common.Go(func() {
			defer wg.Done()
			for v := range bucketCh {
				if globalErr != nil {
					return
				}
				time.Sleep(time.Millisecond * 100)
				atomic.AddInt32(&sum, int32(1))
				fmt.Println(v)
			}
		})
	}

	for i := 0; i < 100; i++ {
		bucketCh <- i
	}

	close(bucketCh)
	wg.Wait()
	fmt.Println("sum:", sum)
}
